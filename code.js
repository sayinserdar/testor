// This plugin will open a modal to prompt the user to enter a number, and
// it will then create that many rectangles on the screen.
// This file holds the main code for the plugins. It has access to the *document*.
// You can access browser APIs in the <script> tag inside "ui.html" which has a
// full browser enviroment (see documentation).
// This shows the HTML page in "ui.html"
figma.showUI(__html__);
// Calls to "parent.postMessage" from within the HTML page will trigger this
// callback. The callback will be passed the "pluginMessage" property of the
// posted message.
figma.ui.onmessage = msg => {
    // One way of distinguishing between different types of messages sent from
    // your HTML page is to use an object with a "type" property like this.
    let currentPage;
    let visiblePageFrames;
    let componentNodesOfFrames = [];
    // TODO: Change the selection of components according to this visibility toggle.
    let visibilityToggle = msg.visibilityToggle;
    if (msg.type === 'generate-test') {
        currentPage = figma.currentPage;
        visiblePageFrames = currentPage.children.filter(pageChildren => pageChildren.type === "FRAME" && pageChildren.visible != false);
        visiblePageFrames.forEach((frame) => {
            componentNodesOfFrames.push(frame.children.filter((frameChild) => frameChild.type === "COMPONENT" && frameChild.visible != false));
        });
    }
};
// TODO: Create a recursive function which loops through all the children of the selected componentNode
let generateTest = () => {
};
let generateMochaExpect = (name, key, value) => {
    return `
  // Component => ${name}
  // UI Test generated by Testor 
  test${name}Node() {
    let element;
    expect(element.style.${key}).to.equal(${value});
  }
`;
};
